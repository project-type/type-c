

type Instance = class {
    fn init() {
        return Instance()
    }
}

type Instance2 = interface {
    fn init()
}

type Instance3 = interface {
    fn init()
}


type C = Instance | Instance


type LargeArray<T> = class {
    fn init() {
        return LargeArray()
    }
    fn get(index: u32) -> T {
        return unsafe ( sync ( x.abs() as u32 ))
    }
    fn set(index: u32, value: T) {
        sync {
            return unsafe ( sync ( x.abs() as u32 ))
        }
    }
}

//              G                     C
type SmallArray<T> = class(LargeArray<T>){
    fn init() {
        return SmallArray()
    }
}


//      G
fn call<T>(x: T) -> T {
    return x
}

//    C
call<u32>(32)


extern "C" cRaylibWindow {
    //fn InitWindow<V, V>(width: u32, height: u32, title: char[])
    //fn InitWindow(width: u32, width: u32, title: char[])
    fn InitWindow(width: u32, height: u32, title: char[])
    fn WindowShouldClose() -> bool
    fn CloseWindow()
    fn IsWindowReady() -> bool
    fn IsWindowFullscreen() -> bool
}

type Z = variant {
    A(), B(), Z(A: u32)
}

type ConstantNode = class (Node) {
    fn forward() -> Node {
        sync {
            return unsafe ( sync ( x.abs() as u32 ))
        }
        return self
    }
    fn backward() -> Node {
        return self
    }
}


type WorkerInput = variant {
    DownloadFile(url: string),
    Exit()
}

type WorkerOutput = variant {
    Ok(tmpPath: string),
    Error(code: u32)
}

type Worker = process<WorkerInput, WorkerOutput>(num: u32, renderingProcess: NotificationWorker) {
    print("hi")
}

type NotificationWorker = process<WorkerOutput, u32>(x: i32, y: i32) {
    fn receive(input: WorkerOutput) {
        match input {
            WorkerOutput.Ok(tmpPath) {
                DisplayGUIPopUP("success", "Download complete")
            }
            WorkerOutput.Error(code) {
                DisplayGUIPopUP("success", "Download Failed.")
            }
        }
    }
}

fn main() -> void {
    let okResults: struct {worker: Worker, response: ProcessResponse}[] = []
    let errorResults: struct {worker: Worker, response: ProcessResponse}[] = []
    let notificationGUI = spawn ::NotificationWorker()

    let processes: Worker[] = []
    for let i: u32 = 0; i < 1000; i = i + 1 {
        let listener: fn(input: WorkerOutput) =
            fn(input: WorkerOutput) {
                 match input {
                    WorkerOutput.Ok(tmpPath) {
                        okResults.push({worker: processes[i], response: input})
                    }
                    WorkerOutput.Error(code) {
                        errorResults.push({worker: processes[i], response: input})
                    }
            }
        }
        processes.push(spawn listener::Worker(i, notificationGUI))
        emit processes[i]::DownloadFile("https://www.google.com")
        emit processes[i]::Exit()
    }
}

fn test() {
    let x: u8 = let z : u32 = 1 in
        let y: u32 = 32 in
            "haha"

    let z: u32 = let alpha: u32 = 0xff in
        "unreachable"

    print (let y: u32 = 1 in
        match 1 {
            1 => match 2 {
                2 => "two",
                3 => "three",
                5 => "other",
                7 => "unreachable"
            },
            2 => "two",
            3 => "three",
            5 => "other"
        })

    let x: u32 =
        let y: u32 = 3 in y
}
extern "C" cRayclibWindow {
    fn InitWindow(width: u32, height: u32, title: char[])
    fn WindowShouldClose() -> bool
    fn CloseWindow()
    fn IsWindowReady() -> bool
    fn IsWindowFullscreen() -> bool
}

extern "C" ccRaylibWindow {
    fn InitWindow(width: u32, height: u32, title: char[])
    fn WindowShouldClose() -> bool
    fn CloseWindow()
    fn IsWindowReady() -> bool
    fn IsWindowFullscreen() -> bool
}


