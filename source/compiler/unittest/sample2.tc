
type Tree = variant {
    Binary(lhs: Tree, rhs: Tree),
    Unary(child: Tree),
    Leaf(value: u32),
    Empty()
}

type Instance = interface {
    fn cool() -> Instance
}

type Instance2 = interface {
    fn cool() -> Instance2
}

type Instance3 = class(Instance, interface{fn haha() -> Instance3 }) {
    fn inits(){print("HAYYA")}
    let x: u32 = 1
    let x2: string = "hello"
}

type s1 = struct {
    name: string
}

type s2 = struct(s1) {
    name2: string
}

/*
type s3 = struct(s1, s2) {
    name2: string
}
*/

/*
type P = process<s1, s2>(x: u32, x: string) {
    fn receive(){
        print("got a jar of dirt!")
    }
}

type RudeFN = fn(x: u32, x: string) -> u32
*/



type C = C

