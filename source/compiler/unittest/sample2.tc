
fn print(x: u32){
    let y: u32 = x
}

let x: u32 = print

let x2: f32 = print

let z = fn(x: u32, y:u32) -> u32 = x

fn keep() -> u32 {
    while true {
        break
        continue
        return(1)
    }
}

type Container<T>  = struct{
    x: T,
    y: T,
    h: T,
    w: T
}

type Generator<T> = interface {
    fn next() -> T.X.Z
    fn recursive<U>(x: U) -> U
}

type Z = struct {
    x: Generator<X.T.Z<u32>?>
}

1 as Z